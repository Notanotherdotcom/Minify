<?php

class Minify extends WireData implements Module, ConfigurableModule {

	/**
	 * Basic information about module
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Minify',
			'summary' => 'Compresses and combines javascript and CSS files for use in templates using the Minify library. Please see the license file included for licensing info.',
			'href' => 'http://processwire.com/talk/topic/1537-minify/',
			'version' => 100,
			'permanent' => false,
			'autoload' => false,
			'singular' => true,
		);
	}

	/**
	 * Default configuration for module
	 *
	 * This is based on Ryan's examples [used also in @apeisa's AdminBar, for instance]
	 */
	static public function getDefaultData() {
		return array();
	}

	/**
	 * Populate the default config data
	 *
	 */
	public function __construct() {
	   foreach(self::getDefaultData() as $key => $value) {
		   $this->$key = $value;
	   }
	}

	/**
	 * Initialize the module and setup hooks
	 */
	public function init() {
		// Not required
	}
	static public function getModuleConfigInputfields(array $data) {

		$templatepath = trim(wire('config')->urls->templates, '/'); // We need to trim off the startt and end slashes for the Minify URL
		
		$scripts = array();
		$scriptfiles = scandir(wire('config')->paths->root . 'site/templates/scripts/');
		foreach ($scriptfiles as $file) {
			if (strpos($file, '.js') !== FALSE) {
				$scripts[] = $file;
			}
		}
		
		
		$styles = array();
		$stylefiles = scandir(wire('config')->paths->root . 'site/templates/styles/');
		foreach ($stylefiles as $file) {
			if (strpos($file, '.css') !== FALSE) {
				$styles[] = $file;
			}
		}

		$fields = new InputfieldWrapper();
		$modules = Wire::getFuel('modules');
		
		$field = $modules->get("InputfieldAsmSelect");
		$field->attr('name', 'styles');
		foreach($styles as $style) {
			$field->addOption($style); 
		}
		$field->label = "Stylesheets available for selection";
		$field->description = "Select the .css files from your /site/template/styles/ folder that you wish to minify.";
		$str = "var stylelist = '';
		$('#' + $(this).parent().attr('id') + ' .asmListItemLabel').each(function(index) {
			var separator = '';
			if (stylelist != '') {
				separator = ',';
			}
			stylelist = stylelist + separator + $(this).html();
		});
		var minString = '<strong style=\"font-weight: bold;\">Copy and paste this before your &lt;/head&gt; tag:</strong><br /><br /><input type=\"text\" style=\"width: 100%;\" value=\"&lt;link href=&quot;&lt;?php echo \$config->urls->siteModules; ?&gt;Minify/min/b=&lt;?php echo trim(\$config->urls->templates, \'/\'); ?&gt;/styles&f=' + stylelist + '&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;\" />';
		var minStringContainer = $(this).parent().attr('id') + 'Text';
		if ($('#' + minStringContainer).length == 0) {
			$(this).after('<div id=\"' + minStringContainer + '\">' + minString + '</div>');
		} else {
			$('#' + minStringContainer).html(minString);
		}";		
		$field->attr('onchange', $str); 
		$fields->append($field);
		
		$field = $modules->get("InputfieldAsmSelect");
		$field->attr('name', 'scripts');
		foreach($scripts as $script) {
			$field->addOption($script); 
		}
		$field->label = "Scripts available for selection";
		$scripts = implode(',', $scripts);
		$field->description = "Select the .js files from your /site/template/scripts/ folder that you wish to minify.";
		$str = "var scriptlist = '';
		$('#' + $(this).parent().attr('id') + ' .asmListItemLabel').each(function(index) {
			var separator = '';
			if (scriptlist != '') {
				separator = ',';
			}
			scriptlist = scriptlist + separator + $(this).html();
		});var minString = '<strong style=\"font-weight: bold;\">Copy and paste this before your &lt;/head&gt; tag:</strong><br /><br /><input type=\"text\" style=\"width: 100%;\" value=\"&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;?php echo \$config->urls->siteModules; ?&gt;Minify/min/b=&lt;?php echo trim(\$config->urls->templates, \'/\'); ?&gt;/scripts&f=' + scriptlist + '&quot;&gt;&lt;/script&gt;\" /><br /><br />Note: Ensure that if you are adding an jQuery-related scripts that you add jQuery to the top of the list before it is called by any other script.';
		var minStringContainer = $(this).parent().attr('id') + 'Text';
		if ($('#' + minStringContainer).length == 0) {
			$(this).after('<div id=\"' + minStringContainer + '\">' + minString + '</div>');
		} else {
			$('#' + minStringContainer).html(minString);
		}";
		$field->attr('onchange', $str); 
		$fields->append($field);

		return $fields;
	}
}